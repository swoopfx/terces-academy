  <?php echo $this->headtitle("Buy Course");

    ?>

  <!-- Call To Action Section - Start
        ================================================== -->
  <section id="buyc" class="calltoaction_section section_space_lg bg_dark decoration_wrap">
      <div class="container">
          <div class="row align-items-center">
              <div class="col col-lg-7">


                  <h2 class="heading_text text-white">
                      Select Payment Methods
                  </h2>
                  <br>
                  <div class="widget course_list_wrap">

                      <!-- <ul class="course_list unordered_list_block">

                          <li v-for="dat in paymentMethod">

                              <div class="comment_item">
                                  <div class="comment_author">
                                      <div class="author_thumbnail">
                                          <img :src="dat.image" alt="Terces â€“ Online Learning Platform">
                                      </div>
                                      <div class="author_content">
                                          <a href="#" @click="selectMethod(dat.method, dat.id)">
                                              <h4 class="author_name"></h4>
                                          </a>

                                      </div>
                                  </div>
                                  <p></p>

                              </div>

                              <br>
                          </li>

                      </ul> -->





                  </div>
              </div>
              <div class="col col-lg-5">
                  <div class="col col-lg-12">
                      <div class="pricing_card text-center tilt">
                          <h3 class="card_heading">Amount Payable</h3>
                          <div class="pricing_wrap">
                              <span class="price_value"><sup><?= $this->currencyFormat($data->getCost(), "USD") ?></span>
                              <small class="d-block"></small> <?= $data->getTitle(); ?></small>

                          </div>
                          <hr>
                          <ul class="info_list unordered_list_block text-start">
                              <li>
                                  <i class="fas fa-caret-right"></i>

                              </li>

                          </ul>
                          <div class="btn_wrap pb-0">
                              <?php if ($this->identity()) : ?>

                                  <!-- <div id="paypal-button-container"></div> -->

                                  <button class="btn border_dark" @click=" payWithPaystack()">
                                      <span>
                                          <small>Pay Now</small>

                                      </span>
                                  </button>
                              <?php else : ?>
                                  <a class="btn border_dark" href="<?= $this->url("app", ["action" => "refer"]) ?>">
                                      <span>
                                          <small>Pay Now</small>

                                      </span>
                                  </a>
                              <?php endif; ?>
                          </div>
                      </div>
                  </div>
              </div>
          </div>
      </div>

  </section>
  <!-- Call To Action Section - End
        ================================================== -->
  <script src="https://js.paystack.co/v2/inline.js"></script>
  <script>
      //   paypal.Buttons({
      //       // Order is created on the server and the order id is returned
      //       createOrder() {
      //           return fetch("/app/paypal-create-order", {
      //                   method: "POST",
      //                   headers: {
      //                       "Content-Type": "application/json",
      //                   },
      //                   // use the "body" param to optionally pass additional order information
      //                   // like product skus and quantities
      //                   body: JSON.stringify({
      //                       //   cart: [{
      //                       //       sku: "YOUR_PRODUCT_STOCK_KEEPING_UNIT",
      //                       //       quantity: "YOUR_PRODUCT_QUANTITY",
      //                       //   }, ],
      //                   }),
      //               })
      //               .then((response) => response.json())
      //               .then((order) => order.id);
      //       },
      //       // Finalize the transaction on the server after payer approval
      //       onApprove(data) {
      //           return fetch("/app/paypal-capture-payment", {
      //                   method: "POST",
      //                   headers: {
      //                       "Content-Type": "application/json",
      //                   },
      //                   body: JSON.stringify({
      //                       orderID: data.orderID
      //                   })
      //               })
      //               .then((response) => {
      //                   if (response.status == 201) {
      //                       window.location.href = "/";
      //                   } else if (response.status == 400) {
      //                       Swal.fire({
      //                           title: "Something went wrong",

      //                           type: "error",
      //                       })
      //                   }
      //               })
      //               // .then((orderData) => {
      //               //     // Successful capture! For dev/demo purposes:
      //               //     // console.log('Capture result', orderData, JSON.stringify(orderData, null, 2));
      //               //     // const transaction = orderData.purchase_units[0].payments.captures[0];
      //               //     // alert(`Transaction ${transaction.status}: ${transaction.id}\n\nSee console for all available details`);
      //               //     // When ready to go live, remove the alert and show a success message within this page. For example:
      //               //     // const element = document.getElementById('paypal-button-container');
      //               //     // element.innerHTML = '<h3>Thank you for your payment!</h3>';
      //               //     // Or go to another URL:  window.location.href = 'thank_you.html';
      //               // })
      //               .catch(err => {
      //                   Swal.fire({
      //                       title: "Something went wrong",
      //                       type: "error",
      //                   })
      //               });
      //       }
      //   }).render('#paypal-button-container');

      const buycourse = Vue.createApp({
          data() {
              return {
                  paymentMethod: [],
                  activePaymentMethod: "",
                  activeMethodId: 0,
                  courseUuid: "",
                  isPaying: false,
                  paystack_public_key: "",
                  paystack_amount: "",
                  paystack_ref: "",
                  paystack_email: "",
              }
          },

          mounted() {
              this.getPaymentMethod();
              this.getPaystackPublicKey();
          },

          methods: {
              getPaymentMethod() {
                  axios.get("/app/get-payment-methods").then(res => {
                      if (res.status == 200) {
                          this.paymentMethod = res.data.data;
                          this.activePaymentMethod = res.data.data[0].method;
                          this.activeMethodId = res.data.data[0].id;
                      }
                  }).catch(err => {

                  });
              },

              getPaystackPublicKey() {
                  axios.get("/app/get-paystack-public-key").then((result) => {
                      if (result.status == 200) {
                          this.paystack_public_key = result.data.public_key;


                      }
                  }).catch((err) => {

                  });
              },

              selectMethod(e, r) {
                  this.activePaymentMethod = e;
                  this.activeMethodId = r;
                  console.log(this.actieMethodId);
              },

              payWithFlutterwave() {
                  this.isPaying = true;
                  axios.get("/app/pre-transaction").then(res => {

                      if (res.status == 201) {
                          resData = res.data.data;
                          FlutterwaveCheckout({
                              public_key: resData.public_key,
                              tx_ref: resData.tx_ref,
                              amount: resData.amount,
                              currency: "USD",
                              payment_options: "card",
                              //   redirect_url: "https://glaciers.titanic.com/handle-flutterwave-payment",
                              meta: {
                                  consumer_id: 23,
                                  consumer_mac: resData.customer.uuid,
                              },
                              customer: {
                                  email: resData.customer.email,
                                  //   phone_number: "08102909304",
                                  name: resData.customer.fullname,
                              },
                              callback: function(response) { // specified callback function
                                  if (response.status == "successful") {
                                      cutomerboard.tx_ref = response.tx_ref;
                                      cutomerboard.amountPayed = response.amount;
                                      cutomerboard.concludeNewPayment();
                                  } else {
                                      // set error
                                  }
                              },
                              customizations: {
                                  title: "Terces Academy",
                                  description: resData.description,
                                  logo: "https://academy.tercesjobs.com/assets/images/oie_3QNUOMetbJh7.png",
                              },
                          });
                      }
                  }).catch()



              },

              payWithPaystack() {
                  this.isPaying = true;
                  axios.get("/app/init-paystack").then((result) => {
                      if (result.status == 201) {
                          this.paystack_ref = result.data.ref;
                          this.paystack_email = result.data.email;
                          this.paystack_amount = result.data.amount;
                          this.paystack_public_key = result.data.public_key;
                          const paystack = new PaystackPop();
                          paystack.newTransaction({
                              // other params
                              //   key: this.paystack_public_key,
                              //   ref: this.paystack_ref,
                              //   email: this.paystack_email,
                              //   amount: paystack_amount,

                              key: this.paystack_public_key,
                              email: this.paystack_email,
                              amount: this.paystack_amount,
                            //   currency: "USD",
                              ref: this.paystack_ref,

                              onSuccess: (transaction) => {
                                  // Payment complete! Reference: transaction.reference 
                                  let formData = new FormData();
                                  formData.append("reference", transaction.reference);
                                  axios.post("/app/verify-paystack", formData).then((result) => {

                                      if (result.status == 201) {
                                          Swal.fire({
                                              icon: "success",
                                              title: "Success",
                                              text: "You have successfully subscribed to a course"
                                          }).then(res => {
                                              window.location.href = "/";
                                          })
                                      }
                                  }).catch((err) => {

                                  });
                              },
                              onCancel: () => {
                                  // user closed popup
                                  window.location.reload();
                              }
                          });
                      }

                  }).catch((err) => {

                  });

              },

              payWithPaypal() {

              },

              pay() {

                  if (this.activeMethodId == 10) {

                      this.payWithFlutterwave()
                  } else if (this.activeMethodId == 20) {
                      this.payWithPaypal()
                  }
              }
          },
      });
      buycourse.mount("#buyc")
  </script>