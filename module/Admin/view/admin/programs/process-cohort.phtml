<?php echo $this->headTitle("Process Cohort"); ?>

<div id="rooom">
    <div class="dash-headline-two">
        <div>
            <h4 class="tx-inverse mg-b-5"><?= $cohort["cohortName"] ?></h4>
            <p class="mg-b-0">Active On: <?= $this->dateformat($cohort["startDate"], IntlDateFormatter::MEDIUM, IntlDateFormatter::NONE) ?></p>
        </div>
        <div class="d-h-t-right">
            <div class="summary-item">
                <h1>

                    <h1><?php

                        if (count($students) > 0) {
                            if ($students[0]["isAll"]) {
                                echo "All";
                            } else {
                                echo count($students ?? []);
                            }
                        } else {
                            echo 0;
                        } ?></h1>

                </h1>
                <span>Students</span>
            </div>



        </div>
    </div><!-- dash-headline-two -->

    <div class="nav-statistics-wrapper">
        <nav v-if="roomType.length" class="nav">
            <a v-for="type in roomType" href="#" @click="activateRoom(type.id)" class="nav-link">{{type.type}}</a>
        </nav>

        <nav class="nav">
            <a href="" class="nav-link"></a>

        </nav>
    </div><!-- nav-statistics-wrapper -->

    <div class="row row-statistics mg-b-30">
        <div class="col-md-8">

            <div v-if="activeRoomtype == 100 ">
                <?= $this->partial("partial/content-room-zoom-list"); ?>
            </div>
            <div v-else-if="activeRoomtype == 200">

            </div>


        </div><!-- col-5 -->
        <!--  <div class="col-md-7 mg-t-20 mg-md-t-0">
            <canvas id="chartBar1" height="280"></canvas>
        </div>col-7 -->
    </div><!-- row -->

    <hr>


    <div class="report-summary-header">
        <div>
            <h4 class="tx-inverse mg-b-3">Zoom Events Summary</h4>
            <!-- <p class="mg-b-0"><i class="icon ion-calendar mg-r-3"></i> January 01, 2018 - January 31, 2018</p> -->
        </div>
        <div>
            <button v-if="assignedStatus" @click="assignAllStudent()" class="btn btn-primary"><i class="icon ion-ios-clock-outline tx-22"></i> Assign To All</button>
            <div v-if="!assignedStatus">
                <div v-if="isResendingMails" class="d-flex bg-gray-200 ht-20 pos-relative align-items-center">
                    <div class="sk-folding-cube">
                        <div class="sk-cube1 sk-cube"></div>
                        <div class="sk-cube2 sk-cube"></div>
                        <div class="sk-cube4 sk-cube"></div>
                        <div class="sk-cube3 sk-cube"></div>
                    </div>
                </div>
                <button v-else @click="sendInvitations()" class="btn btn-success"><i class="icon ion-ios-gear-outline tx-24"></i> Send Out Invitations</button>
            </div>

        </div>
    </div>

    <div class="row no-gutters dashboard-chart-one">
        <div class="col-md-4 col-lg">
            <div class="card card-total">
                <div>
                    <h1>0</h1>
                    <p>Total Events</p>
                </div>
                <div>

                </div>
            </div>
        </div>
        <div class="col-md-4 col-lg">
            <div class="card card-total">
                <div>
                    <h1>55</h1>
                    <p>Total Products</p>
                </div>
                <div>
                    <div class="tx-16 mg-b-15 tx-center op-5">
                        <i class="icon ion-cube tx-gray-600"></i>
                        <i class="icon ion-cube tx-gray-600"></i>
                        <i class="icon ion-cube tx-gray-600"></i>
                        <i class="icon ion-cube tx-gray-600"></i>
                        <i class="icon ion-cube tx-gray-600"></i>
                        <i class="icon ion-cube tx-gray-600"></i>
                        <i class="icon ion-cube tx-gray-600"></i>
                        <i class="icon ion-cube tx-gray-600"></i>
                        <i class="icon ion-cube tx-gray-400"></i>
                        <i class="icon ion-cube tx-gray-400"></i>
                    </div>
                    <!--  <label>Digital products (85%)</label>
                    <div class="progress mg-b-10">
                        <div class="progress-bar bg-success progress-bar-xs wd-85p" role="progressbar" aria-valuenow="85" aria-valuemin="0" aria-valuemax="100"></div>
                    </div>

                    <label>Non-digital products (15%)</label>
                    <div class="progress">
                        <div class="progress-bar bg-warning progress-bar-xs wd-15p" role="progressbar" aria-valuenow="15" aria-valuemin="0" aria-valuemax="100"></div>
                    </div> -->
                </div>
            </div>
        </div>
        <!-- <div class="col-md-4 col-lg">
            <div class="card card-total">
                <div>
                    <h1>30</h1>
                    <p>Total Franchise</p>
                </div>
                <div>
                    <div class="tx-22 mg-b-10 tx-center op-5">
                        <i class="icon ion-location tx-gray-600"></i>
                        <i class="icon ion-location tx-gray-600"></i>
                        <i class="icon ion-location tx-gray-600"></i>
                        <i class="icon ion-location tx-gray-600"></i>
                        <i class="icon ion-location tx-gray-600"></i>
                        <i class="icon ion-location tx-gray-600"></i>
                        <i class="icon ion-location tx-gray-600"></i>
                        <i class="icon ion-location tx-gray-400"></i>
                        <i class="icon ion-location tx-gray-400"></i>
                        <i class="icon ion-location tx-gray-400"></i>
                    </div>
                    <label>Local (75%)</label>
                    <div class="progress mg-b-10">
                        <div class="progress-bar bg-purple progress-bar-xs wd-75p" role="progressbar" aria-valuenow="75" aria-valuemin="0" aria-valuemax="100"></div>
                    </div>

                    <label>International (25%)</label>
                    <div class="progress">
                        <div class="progress-bar bg-pink progress-bar-xs wd-25p" role="progressbar" aria-valuenow="25" aria-valuemin="0" aria-valuemax="100"></div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md col-lg-4">
            <div class="card card-revenue">
                <h6>Monthly Revenue</h6>
                <p>Calculated every 15th of the month</p>
                <h1>$32,500 <span class="tx-success">1.4% up</span></h1>
                <div id="rs3" class="ht-50 ht-sm-70 mg-r--1"></div>
                <label>Last month: <span>$79,554</span></label>
            </div>
        </div> -->
    </div>

</div>

<script>
    const app = Vue.createApp({
        data() {
            return {
                roomType: [],
                activeRoomtype: 0,
                programType: 10,
                oraclep6Classes: [],
                cohortId: '<?= $cohort["id"] ?>',
                classRoomDetails: [],
                isCreatingEvent: false,
                selectedClassroom: "",


                formSelectedEventDatetime: "",
                formSelectedDUration: "",
            }
        },

        mounted() {
            this.getRoomType();
            this.getAssignedStatus();
            this.getZoomClass();
        },

        methods: {
            getRoomType() {
                axios.get("/admins/oracle/get-room-types").then((result) => {
                    if (result.status == 200) {
                        // console.log(result.data.data);
                        this.roomType = result.data.data;
                    }
                }).catch((err) => {

                });
            },

            activateRoom(id) {
                this.activeRoomtype = id;
                if (id == 100) {
                    this.getOracleClasess()
                }
            },

            classroomState(id) {

                // console.log(this.classRoomDetails);
                let res = "";
                return this.getClassromDetails(id).then((result) => {

                    if (result.length) {
                        return false;
                    } else {
                        return true
                    }

                }).catch((err) => {

                });

                // console.log(res);
            },

            async getClassromDetails(oracleclassId) {

                return await axios.get("/admins/oracle/retrive-classroom-details", {
                    params: {
                        oracle_class: oracleclassId,
                        cohort: this.cohortId,
                        room_type: this.activeRoomtype
                    }
                }).then((result) => {
                    if (result.status == 200) {
                        // console.log("H");
                        // this.classRoomDetails = result.data.data;
                        // return this
                        return "BBB";
                        // return result.data.data;
                    }
                }).catch((err) => {
                    return "GTTT";
                });
            },

            getAssignedStatus() {
                axios.get("/admins/programs/get-assigned-status", {
                    params: {
                        cohort: this.cohortId
                    }
                }).then((result) => {
                    if (result.status == 200) {
                        let data = result.data.data;
                        if (data.length) {
                            this.assignedStatus = false;
                        } else {
                            this.assignedStatus = true;
                        }
                        // this.assignedStatus = "";
                    }
                }).catch((err) => {

                });
            },

            getZoomRoomType() {
                if (this.activeRoomtype != 0) {
                    axios.get("admins/oracle/").then((result) => {
                        if (result.status == 200) {
                            this.oraclep6Classes = result.data.data;
                        }
                    }).catch((err) => {

                    });
                }
            },

            getZoomClass() {
                axios.get("/admins/programs/get-zoom-class", {
                    params: {
                        cohort: this.cohortId,
                        program: this.programType

                    }
                }).then((result) => {
                    if (result.status == 200) {
                        this.zoomClass = result.data.data;
                    }
                }).catch((err) => {

                });
            },

            getOracleClasess() {
                axios.get("/admins/oracle/get-oracle-classes").then((result) => {
                    if (result.status == 200) {
                        this.oraclep6Classes = result.data.data;
                    }
                }).catch((err) => {

                });
            },

            selectClassroomEvent(id) {
                this.selectedClassroom = id;
            },

            // Create Event Meeting
            createEventMeeting() {
                this.isCreatingEvent = true;
                if (this.formSelectedEventDatetime == "" || this.formSelectedDUration == "") {
                    Swal.fire({
                        icon: "error",
                        title: "Required Field",
                        text: "A Required Field is empty",
                    });

                } else {
                    let formData = new FormData();
                    formData.append("classRoomId", this.selectedClassroom);
                    formData.append("duration", this.formSelectedDUration);
                    formData.append("eventDate", this.formSelectedEventDatetime);
                    axios.post("/admins/oracle/create-zoom-event", formData).then((result) => {

                    }).catch((err) => {

                    });

                }
            }
        },

    });
    app.mount("#rooom");
</script>